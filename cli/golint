cmd/turbo/main.go:112:11: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary) (golint)
cmd/turbo/main.go:123:11: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary) (golint)
cmd/turbo/main.go:135:11: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary) (golint)
internal/analytics/analytics.go:14:6: exported type `Events` should have comment or be unexported (golint)
internal/analytics/analytics.go:16:6: exported type `EventPayload` should have comment or be unexported (golint)
internal/analytics/analytics.go:18:6: exported type `Recorder` should have comment or be unexported (golint)
internal/analytics/analytics.go:22:6: exported type `Client` should have comment or be unexported (golint)
internal/analytics/analytics.go:28:6: exported type `Sink` should have comment or be unexported (golint)
internal/analytics/analytics.go:81:1: exported function `NewClient` should have comment or be unexported (golint)
internal/backends/backends.go:1:1: package comment should be of the form "Package backends ..." (golint)
internal/backends/backends.go:22:1: exported function `GetBackend` should have comment or be unexported (golint)
internal/backends/nodejs/nodejs.go:152:5: exported var `NodejsPnpmBackend` should have comment or be unexported (golint)
internal/backends/nodejs/nodejs.go:1:1: package comment should be of the form "Package nodejs ..." (golint)
internal/backends/nodejs/nodejs.go:202:5: exported var `NodejsNpmBackend` should have comment or be unexported (golint)
internal/backends/nodejs/nodejs.go:21:5: exported var `NodejsYarnBackend` should have comment or be unexported (golint)
internal/backends/nodejs/nodejs.go:80:5: exported var `NodejsBerryBackend` should have comment or be unexported (golint)
internal/cache/async_cache.go:1:1: package comment should be of the form "Package cache ..." (golint)
internal/cache/cache.go:32:6: exported type `CacheEvent` should have comment or be unexported (golint)
internal/cache/cache.go:3:1: package comment should be of the form "Package cache ..." (golint)
internal/cache/cache_fs.go:119:1: receiver name cache should be consistent with previous receiver name f for fsCache (golint)
internal/cache/cache_fs.go:123:6: type name will be used as cache.CacheMetadata by other packages, and that stutters; consider calling this Metadata (golint)
internal/cache/cache_fs.go:1:1: package comment should be of the form "Package cache ..." (golint)
internal/cache/cache_http.go:1:1: package comment should be of the form "Package cache ..." (golint)
internal/cache/cache_signature_authentication.go:18:6: exported type `ArtifactSignatureAuthentication` should have comment or be unexported (golint)
internal/cache/cache_signature_authentication.go:19:2: struct field `teamId` should be `teamID` (golint)
internal/cache/cache_signature_authentication.go:1:1: package comment should be of the form "Package cache ..." (golint)
internal/cache/cache_signature_authentication.go:47:2: var `teamId` should be `teamID` (golint)
internal/cache/cache_signature_authentication.go:54:3: struct field `TeamId` should be `TeamID` (golint)
internal/cache/cache_signature_authentication.go:89:6: exported type `StreamValidator` should have comment or be unexported (golint)
internal/cache/cache_signature_authentication.go:93:1: exported method `StreamValidator.Validate` should have comment or be unexported (golint)
internal/cache/cache_signature_authentication.go:98:1: exported method `StreamValidator.CurrentValue` should have comment or be unexported (golint)
internal/cache/cache_signature_authentication_test.go:172:38: func parameter `teamId` should be `teamID` (golint)
internal/cache/cache_signature_authentication_test.go:175:3: struct field `TeamId` should be `TeamID` (golint)
internal/cache/cache_signature_authentication_test.go:17:2: var `teamId` should be `teamID` (golint)
internal/cache/cache_signature_authentication_test.go:188:2: var `teamId` should be `teamID` (golint)
internal/cache/cache_signature_authentication_test.go:53:2: var `teamId` should be `teamID` (golint)
internal/cache/cache_signature_authentication_test.go:97:2: var `teamId` should be `teamID` (golint)
internal/client/client.go:120:1: receiver name c should be consistent with previous receiver name api for ApiClient (golint)
internal/client/client.go:127:1: receiver name c should be consistent with previous receiver name api for ApiClient (golint)
internal/client/client.go:131:1: exported method `ApiClient.UserAgent` should have comment or be unexported (golint)
internal/client/client.go:135:1: exported method `ApiClient.PutArtifact` should have comment or be unexported (golint)
internal/client/client.go:161:9: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary) (golint)
internal/client/client.go:167:1: exported method `ApiClient.FetchArtifact` should have comment or be unexported (golint)
internal/client/client.go:188:1: exported method `ApiClient.RecordAnalyticsEvents` should have comment or be unexported (golint)
internal/client/client.go:217:1: receiver name c should be consistent with previous receiver name api for ApiClient (golint)
internal/client/client.go:22:6: exported type `ApiClient` should have comment or be unexported (golint)
internal/client/client.go:249:1: receiver name c should be consistent with previous receiver name api for ApiClient (golint)
internal/client/client.go:24:2: struct field `baseUrl` should be `baseURL` (golint)
internal/client/client.go:281:6: exported type `User` should have comment or be unexported (golint)
internal/client/client.go:288:6: exported type `UserResponse` should have comment or be unexported (golint)
internal/client/client.go:293:1: receiver name c should be consistent with previous receiver name api for ApiClient (golint)
internal/client/client.go:32:2: struct field `HttpClient` should be `HTTPClient` (golint)
internal/client/client.go:338:1: exported method `ApiClient.VerifySSOToken` should have comment or be unexported (golint)
internal/client/client.go:40:1: exported method `ApiClient.SetToken` should have comment or be unexported (golint)
internal/client/client.go:44:1: comment on exported function `NewClient` should be of the form `NewClient ...` (golint)
internal/client/client.go:45:16: func parameter `baseUrl` should be `baseURL` (golint)
internal/client/client.go:67:1: receiver name c should be consistent with previous receiver name api for ApiClient (golint)
internal/client/client.go:99:1: receiver name c should be consistent with previous receiver name api for ApiClient (golint)
internal/config/config.go:107:2: var `turboConfigJson` should be `turboConfigJSON` (golint)
internal/config/config.go:156:4: var `apiUrl` should be `apiURL` (golint)
internal/config/config.go:162:4: var `loginUrl` should be `loginURL` (golint)
internal/config/config.go:217:1: exported function `ReadTurboConfig` should have comment or be unexported (golint)
internal/config/config.go:228:10: `if` block ends with a `return` statement, so drop this `else` and outdent its block (golint)
internal/config/config.go:39:2: struct field `TeamId` should be `TeamID` (golint)
internal/config/config.go:43:2: struct field `ApiUrl` should be `APIURL` (golint)
internal/config/config.go:45:2: struct field `LoginUrl` should be `LoginURL` (golint)
internal/config/config.go:47:2: struct field `ApiClient` should be `APIClient` (golint)
internal/config/config.go:64:1: comment on exported type CacheConfig should be of the form "CacheConfig ..." (with optional leading article) (golint)
internal/config/config_file.go:17:2: struct field `TeamId` should be `TeamID` (golint)
internal/config/config_file.go:19:2: struct field `ApiUrl` should be `APIURL` (golint)
internal/config/config_file.go:21:2: struct field `LoginUrl` should be `LoginURL` (golint)
internal/context/context.go:125:1: exported function `WithGraph` should have comment or be unexported (golint)
internal/context/context.go:132:10: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary) (golint)
internal/context/context.go:236:19: method populateTopologicGraphForPackageJson should be populateTopologicGraphForPackageJSON (golint)
internal/context/context.go:26:7: don't use ALL_CAPS in Go names; use CamelCase (golint)
internal/core/scheduler.go:125:3: var `taskId` should be `taskID` (golint)
internal/core/scheduler.go:12:7: don't use ALL_CAPS in Go names; use CamelCase (golint)
internal/core/scheduler.go:14:6: exported type `Task` should have comment or be unexported (golint)
internal/core/scheduler.go:150:4: var `toTaskId` should be `toTaskID` (golint)
internal/core/scheduler.go:163:7: var `fromTaskId` should be `fromTaskID` (golint)
internal/core/scheduler.go:174:6: var `fromTaskId` should be `fromTaskID` (golint)
internal/core/scheduler.go:184:13: range var `fromTaskId` should be `fromTaskID` (golint)
internal/core/scheduler.go:216:1: exported method `Scheduler.AddTask` should have comment or be unexported (golint)
internal/core/scheduler.go:221:1: exported method `Scheduler.AddDep` should have comment or be unexported (golint)
internal/core/scheduler.go:22:6: exported type `Visitor` should have comment or be unexported (golint)
internal/core/scheduler.go:24:6: exported type `Scheduler` should have comment or be unexported (golint)
internal/core/scheduler.go:54:1: exported method `Scheduler.Prepare` should have comment or be unexported (golint)
internal/fs/copy_file.go:1:1: package comment should be of the form "Package fs ..." (golint)
internal/fs/find_up.go:51:1: comment on exported function `FindupFrom` should be of the form `FindupFrom ...` (golint)
internal/fs/hash.go:13:1: exported function `HashObject` should have comment or be unexported (golint)
internal/fs/hash.go:21:1: exported function `HashFile` should have comment or be unexported (golint)
internal/fs/package_json.go:140:6: exported type `Workspaces` should have comment or be unexported (golint)
internal/fs/package_json.go:142:6: exported type `WorkspacesAlt` should have comment or be unexported (golint)
internal/fs/package_json.go:146:1: exported method `Workspaces.UnmarshalJSON` should have comment or be unexported (golint)
internal/fs/package_json.go:26:1: exported function `ReadTurboConfigJSON` should have comment or be unexported (golint)
internal/fs/package_json.go:42:6: exported type `RemoteCacheOptions` should have comment or be unexported (golint)
internal/fs/package_json.go:43:2: struct field `TeamId` should be `TeamID` (golint)
internal/fs/package_json.go:54:6: exported type `Pipeline` should have comment or be unexported (golint)
internal/fs/package_json.go:56:1: exported method `Pipeline.GetTaskDefinition` should have comment or be unexported (golint)
internal/fs/package_json.go:65:6: exported type `TaskDefinition` should have comment or be unexported (golint)
internal/fs/package_json.go:81:1: exported method `TaskDefinition.UnmarshalJSON` should have comment or be unexported (golint)
internal/fs/path.go:14:1: exported function `CheckedToAbsolutePath` should have comment or be unexported (golint)
internal/fs/path.go:21:1: exported function `UnsafeToAbsolutePath` should have comment or be unexported (golint)
internal/fs/path.go:25:1: exported function `GetCwd` should have comment or be unexported (golint)
internal/fs/path.go:37:1: exported method `AbsolutePath.ToStringDuringMigration` should have comment or be unexported (golint)
internal/fs/path.go:41:1: exported method `AbsolutePath.Join` should have comment or be unexported (golint)
internal/fs/path.go:47:1: exported method `AbsolutePath.Dir` should have comment or be unexported (golint)
internal/fs/path.go:50:1: exported method `AbsolutePath.MkdirAll` should have comment or be unexported (golint)
internal/fs/path.go:53:1: exported method `AbsolutePath.Remove` should have comment or be unexported (golint)
internal/fs/path.go:56:1: exported method `AbsolutePath.Open` should have comment or be unexported (golint)
internal/fs/path.go:59:1: exported method `AbsolutePath.ReadFile` should have comment or be unexported (golint)
internal/fs/path.go:62:1: exported method `AbsolutePath.FileExists` should have comment or be unexported (golint)
internal/fs/yarn_lockfile.go:14:6: exported type `YarnLockfile` should have comment or be unexported (golint)
internal/fs/yarn_lockfile.go:3:6: exported type `LockfileEntry` should have comment or be unexported (golint)
internal/globby/globby.go:12:1: exported function `GlobFiles` should have comment or be unexported (golint)
internal/info/bin.go:15:6: exported type `BinCommand` should have comment or be unexported (golint)
internal/info/bin.go:17:2: struct field `Ui` should be `UI` (golint)
internal/info/bin.go:35:1: exported method `BinCommand.Run` should have comment or be unexported (golint)
internal/login/link.go:24:2: struct field `Ui` should be `UI` (golint)
internal/login/login.go:26:6: type name will be used as login.LoginCommand by other packages, and that stutters; consider calling this Command (golint)
internal/login/logout.go:18:2: struct field `Ui` should be `UI` (golint)
internal/login/unlink.go:19:2: struct field `Ui` should be `UI` (golint)
internal/logstreamer/logstreamer.go:109:1: exported method `Logstreamer.FlushRecord` should have comment or be unexported (golint)
internal/logstreamer/logstreamer.go:14:6: exported type `Logstreamer` should have comment or be unexported (golint)
internal/logstreamer/logstreamer.go:1:1: package comment should be of the form "Package logstreamer ..." (golint)
internal/logstreamer/logstreamer.go:32:1: exported function `NewLogstreamer` should have comment or be unexported (golint)
internal/logstreamer/logstreamer.go:62:1: exported method `Logstreamer.Close` should have comment or be unexported (golint)
internal/logstreamer/logstreamer.go:70:1: exported method `Logstreamer.Flush` should have comment or be unexported (golint)
internal/logstreamer/logstreamer.go:80:1: exported method `Logstreamer.OutputLines` should have comment or be unexported (golint)
internal/prune/prune.go:27:6: type name will be used as prune.PruneCommand by other packages, and that stutters; consider calling this Command (golint)
internal/prune/prune.go:29:2: struct field `Ui` should be `UI` (golint)
internal/prune/prune.go:55:6: exported type `PruneOptions` should have comment or be unexported (golint)
internal/prune/prune.go:85:1: comment on exported method `PruneCommand.Run` should be of the form `Run ...` (golint)
internal/run/color_cache.go:17:6: exported type `ColorCache` should have comment or be unexported (golint)
internal/run/color_cache.go:24:1: exported function `NewColorCache` should have comment or be unexported (golint)
internal/run/run.go:1055:10: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary) (golint)
internal/run/run.go:369:6: exported type `RunOptions` should have comment or be unexported (golint)
internal/run/run.go:414:2: struct field `dryRunJson` should be `dryRunJSON` (golint)
internal/run/run.go:45:6: type name will be used as run.RunCommand by other packages, and that stutters; consider calling this Command (golint)
internal/run/run.go:47:2: struct field `Ui` should be `UI` (golint)
internal/run/run.go:534:12: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary) (golint)
internal/run/run.go:69:6: exported type `LogsMode` should have comment or be unexported (golint)
internal/run/run.go:72:2: exported const FullLogs should have comment (or a comment on this block) or be unexported (golint)
internal/run/run.go:783:50: func parameter `configJson` should be `configJSON` (golint)
internal/run/run.go:842:2: var `targetUi` should be `targetUI` (golint)
internal/run/run_state.go:107:1: exported method `RunState.Run` should have comment or be unexported (golint)
internal/run/run_state.go:193:1: exported method `RunState.Listen` should have comment or be unexported (golint)
internal/run/run_state.go:234:1: exported method `RunState.Render` should have comment or be unexported (golint)
internal/run/run_state.go:24:6: type name will be used as run.RunResult by other packages, and that stutters; consider calling this Result (golint)
internal/run/run_state.go:278:1: exported method `RunState.Close` should have comment or be unexported (golint)
internal/run/run_state.go:42:6: type name will be used as run.RunResultStatus by other packages, and that stutters; consider calling this ResultStatus (golint)
internal/run/run_state.go:57:6: exported type `BuildTargetState` should have comment or be unexported (golint)
internal/run/run_state.go:71:6: exported type `RunState` should have comment or be unexported (golint)
internal/run/run_state.go:90:1: exported function `NewRunState` should have comment or be unexported (golint)
internal/run/run_test.go:222:3: struct field `configJson` should be `configJSON` (golint)
internal/scm/git.go:4:1: package comment should be of the form "Package scm ..." (golint)
internal/scm/scm.go:17:5: exported var `ErrFallback` should have comment or be unexported (golint)
internal/scm/scm.go:44:1: exported function `FromInRepo` should have comment or be unexported (golint)
internal/scm/scm.go:4:1: package comment should be of the form "Package scm ..." (golint)
internal/scm/stub.go:1:1: package comment should be of the form "Package scm ..." (golint)
internal/scope/filter/filter.go:15:6: exported type `SelectedPackages` should have comment or be unexported (golint)
internal/scope/filter/filter.go:20:6: exported type `PackagesChangedSince` should have comment or be unexported (golint)
internal/scope/filter/filter.go:22:6: exported type `Resolver` should have comment or be unexported (golint)
internal/scope/filter/filter.go:49:1: exported method `Resolver.GetFilteredPackages` should have comment or be unexported (golint)
internal/scope/filter/matcher.go:10:6: exported type `Matcher` should have comment or be unexported (golint)
internal/scope/filter/parse_target_selector.go:10:6: exported type `TargetSelector` should have comment or be unexported (golint)
internal/scope/filter/parse_target_selector.go:23:1: exported method `TargetSelector.IsValid` should have comment or be unexported (golint)
internal/scope/scope.go:18:6: exported type `Opts` should have comment or be unexported (golint)
internal/scope/scope.go:66:1: exported function `ResolvePackages` should have comment or be unexported (golint)
internal/ui/colors.go:12:2: exported const ColorModeUndefined should have comment (or a comment on this block) or be unexported (golint)
internal/ui/colors.go:17:1: exported function `GetColorModeFromEnv` should have comment or be unexported (golint)
internal/ui/colors.go:51:9: `if` block ends with a `return` statement, so drop this `else` and outdent its block (golint)
internal/ui/colors.go:9:6: exported type `ColorMode` should have comment or be unexported (golint)
internal/ui/spinner.go:1:1: package comment should be of the form "Package ui ..." (golint)
internal/ui/term/cursor.go:68:21: should replace `i += 1` with `i++` (golint)
internal/ui/ui.go:18:5: exported var `IsTTY` should have comment or be unexported (golint)
internal/ui/ui.go:19:5: exported var `IsCI` should have comment or be unexported (golint)
internal/ui/ui.go:22:5: don't use ALL_CAPS in Go names; use CamelCase (golint)
internal/ui/ui.go:23:5: don't use ALL_CAPS in Go names; use CamelCase (golint)
internal/ui/ui.go:32:1: exported function `Bold` should have comment or be unexported (golint)
internal/ui/ui.go:90:1: exported function `BuildColoredUi` should have comment or be unexported (golint)
internal/util/backends.go:15:6: exported type `YarnRC` should have comment or be unexported (golint)
internal/util/backends.go:19:1: exported function `IsYarn` should have comment or be unexported (golint)
internal/util/backends.go:23:1: exported function `IsBerry` should have comment or be unexported (golint)
internal/util/backends.go:35:9: `if` block ends with a `return` statement, so drop this `else` and outdent its block (golint)
internal/util/backends.go:64:1: exported function `IsNMLinker` should have comment or be unexported (golint)
internal/util/backends.go:79:1: exported function `GetPackageManagerAndVersion` should have comment or be unexported (golint)
internal/util/filter/filter.go:116:1: exported method `IncludeExcludeFilter.Match` should have comment or be unexported (golint)
internal/util/filter/filter.go:11:6: exported type `Filter` should have comment or be unexported (golint)
internal/util/filter/filter.go:1:1: package comment should be of the form "Package filter ..." (golint)
internal/util/filter/filter.go:83:6: exported type `IncludeExcludeFilter` should have comment or be unexported (golint)
internal/util/filter/filter.go:90:1: exported function `NewIncludeExcludeFilter` should have comment or be unexported (golint)
internal/util/filter/filter.go:97:1: exported function `NewIncludeExcludeFilterDefaults` should have comment or be unexported (golint)
internal/util/modulo.go:3:1: comment on exported function `PositiveMod` should be of the form `PositiveMod ...` (golint)
internal/util/parse_concurrency.go:16:1: exported function `ParseConcurrency` should have comment or be unexported (golint)
internal/util/parse_concurrency.go:20:10: if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary) (golint)
internal/util/parse_concurrency.go:23:11: `if` block ends with a `return` statement, so drop this `else` and outdent its block (golint)
internal/util/parse_concurrency.go:32:10: `if` block ends with a `return` statement, so drop this `else` and outdent its block (golint)
internal/util/printf.go:13:1: comment on exported function `InitPrintf` should be of the form `InitPrintf ...` (golint)
internal/util/printf.go:1:1: package comment should be of the form "Package util ..." (golint)
internal/util/printf.go:20:1: comment on exported function `Sprintf` should be of the form `Sprintf ...` (golint)
internal/util/printf.go:26:1: exported function `Printf` should have comment or be unexported (golint)
internal/util/printf.go:30:1: exported function `Fprintf` should have comment or be unexported (golint)
internal/util/task_id.go:11:6: func GetTaskId should be GetTaskID (golint)
internal/util/task_id.go:19:6: func GetPackageTaskFromId should be GetPackageTaskFromID (golint)
internal/util/task_id.go:8:7: don't use ALL_CAPS in Go names; use CamelCase (golint)
internal/xxhash/xxhash.go:4:1: package comment should be of the form "Package xxhash ..." (golint)
